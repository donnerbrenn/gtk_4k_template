/* File generated with Shader Minifier 1.1.6
 * http://www.ctrl-alt-test.fr
 */
#ifndef SHADERS_H_
# define SHADERS_H_

const char *vshader_vert =
 "#version 400\n"
 "out vec2 UV;"
 "void main()"
 "{"
   "gl_Position.xy=UV=vec2(gl_VertexID%2==1?1:-1,gl_VertexID/2==1?1:-1);"
 "}";

const char *shader_frag =
 "#version 400\n"
 "in vec2 UV;"
 "uniform float iTime;"
 "float s(vec3 i)"
 "{"
   "return cos(i.x)+cos(i.y*1.5)+cos(i.z)+cos(i.y*20.)*.05;"
 "}"
 "float n(vec3 i)"
 "{"
   "return length(max(abs(i-vec3(cos(i.z*1.5)*.3,-.5+cos(i.z)*.2,0.))-vec3(.125,.02,iTime+3.),vec3(0.)));"
 "}"
 "float i(vec3 i)"
 "{"
   "return min(s(i),n(i));"
 "}"
 "vec3 v(vec3 v)"
 "{"
   ""
   "return normalize(vec3(i(v+vec3(.1,0,0).xyy),i(v+vec3(.1,0,0).yxy),i(v+vec3(.1,0,0).yyx)));"
 "}"
 "void main()"
 "{"
   "vec2 c=UV*vec2(1,.5625);"
   "vec3 m=vec3(sin(iTime*.5)*.5,cos(iTime*.5)*.25+.25,iTime),g=normalize(vec3(c.x*1.6,c.y,1.)),r=m,y;"
   "for(int f=0;f<64;f++)"
     "r+=i(r)*g;"
   "y=r;"
   ""
   "g=reflect(g,v(r));"
   "r+=g;"
   "for(int f=0;f<32;f++)"
     "r+=i(r)*g;"
   "gl_FragColor=max(dot(v(r),vec3(.1,.1,0.)),0.)+vec4(.3,cos(iTime*.5)*.5+.5,sin(iTime*.5)*.5+.5,1.)*min(length(r-m)*.04,1.);"
   "if(s(y)>n(y))"
     "gl_FragColor=mix(gl_FragColor,vec4(cos(iTime*.3)*.5+.5,cos(iTime*.2)*.5+.5,sin(iTime*.3)*.5+.5,1.),.3);"
   "gl_FragColor=sqrt(gl_FragColor+vec4(length(r-m)*.02)+(1.-min(y.y+1.9,1.))*vec4(1.,.8,.7,1.))*min(iTime*.5,1.);"
 "}";

#endif // SHADERS_H_
