// Generated with Shader Minifier 1.3.5 (https://github.com/laurentlb/Shader_Minifier/)
#ifndef SHADERS_H_
# define SHADERS_H_

const char *vshader_vert =
 "#version 400\n"
 "void main()"
 "{"
   "gl_Position=vec4(gl_VertexID%2*2-1,gl_VertexID/2*2-1,1,1);"
 "}";

const char *shader_frag =
 "#version 400\n"
 "const float m=acos(-1)*2;"
 "out vec4 fragColor;\n"
 "#define threshold.001\n"
 "vec3 f=vec3(1);"
 "uint v=uint(gl_FragCoord.x*gl_FragCoord.y);\n"
 "#define SAMPLES 300\n"
 "#define BOUNCES 8\n"
 "vec3 u;"
 "uint t(inout uint v)"
 "{"
   "v=uint(v^uint(61))^uint(v>>uint(16));"
   "v*=uint(9);"
   "v^=v>>4;"
   "v*=uint(668265261);"
   "v^=v>>15;"
   "return v;"
 "}"
 "float n(inout uint v)"
 "{"
   "return float(t(v))/4294967296.;"
 "}"
 "vec3 x(inout uint v)"
 "{"
   "float f=n(v)*2.f-1.f,i=n(v)*m,u=sqrt(1.f-f*f);"
   "return vec3(u*cos(i),u*sin(i),f);"
 "}"
 "float e(vec3 v)"
 "{"
   "return max(max(v.x,v.y),v.z);"
 "}"
 "float e(vec3 v,vec3 f)"
 "{"
   "vec3 i=abs(v)-f;"
   "return length(max(i,vec3(0)))+e(min(i,vec3(0)));"
 "}"
 "float i(vec3 v)"
 "{"
   "u=vec3(1);"
   "float i=-e(v,vec3(1,1.1,6)),f=length(v)-1,m=min(i,f);"
   "if(m==f)"
     "u=vec3(0,.3,0);"
   "return m;"
 "}"
 "vec3 s(vec3 v)"
 "{"
   "mat3 m=mat3(v,v,v)-mat3(5e-4);"
   "return normalize(i(v)-vec3(i(m[0]),i(m[1]),i(m[2])));"
 "}"
 "bool i(inout vec3 v,vec3 u)"
 "{"
   "float f=1;"
   "for(uint m=0;m<512&&f>threshold;m++)"
     "v+=u*f,f=i(v);"
   "return f<threshold;"
 "}"
 "void main()"
 "{"
   "vec2 m=(gl_FragCoord.xy/vec2(2560,1440)*2-1)/vec2(1,2560./1440.);"
   "fragColor.xyz=vec3(0);"
   "vec3 d;"
   "for(int r=0;r<SAMPLES;r++)"
     "{"
       "vec3 n=normalize(vec3(m,1)),g=vec3(0,0,-3);"
       "f=vec3(1);"
       "for(int z=0;z<BOUNCES&&i(g,n);z++)"
         "{"
           "d=s(g);"
           "fragColor.xyz+=u*max(dot(normalize(vec3(1))*f,d),0);"
           "fragColor.xyz+=u*max(dot(normalize(vec3(-1,0,-1))*f,d),0);"
           "fragColor.xyz+=u*max(dot(n,d)*f,0);"
           "n=reflect(d,n);"
           "if(z==0)"
             "n=normalize(d+x(v));"
           "f*=max(dot(n,d),0);"
         "}"
     "}"
   "fragColor.xyz=sqrt(fragColor.xyz/(SAMPLES*BOUNCES/3));"
 "}";

#endif // SHADERS_H_
