// Generated with Shader Minifier 1.3.5 (https://github.com/laurentlb/Shader_Minifier/)
#ifndef SHADERS_H_
# define SHADERS_H_

const char *vshader_vert =
 "#version 330\n"
 "void main()"
 "{"
   "gl_Position.xy=vec2(gl_VertexID%2*2-1,gl_VertexID/2*2-1);"
 "}";

const char *shader_frag =
 "#version 330\n"
 "out vec4 fragCol;"
 "float n(vec3 v,vec3 m)"
 "{"
   "vec3 d=abs(v)-m;"
   "return length(max(d,0.))+min(0.,max(d.x,max(d.y,d.z)));"
 "}"
 "float n(vec3 v)"
 "{"
   "return sin(dot(sin(v*32.),vec3(2,3,1)))*cos(dot(cos(v*43.),vec3(3,1,2)))+sin(dot(sin(v*52.),vec3(2,3,1)))*cos(dot(cos(v*73.),vec3(3,1,2)));"
 "}"
 "float f;"
 "float v(vec3 v)"
 "{"
   "float m=n(v*100)/5000*(exp(n(v)+n(v*2)+n(v/5))*.3+.6),d=-n(v,vec3(7.9));"
   "v=asin(sin(v));"
   "float l=n(v,vec3(.7,.6,.6))-.02;"
   "f=l>d?"
     "sin(length(v)*20):"
     "1;"
   "return min(d,l)-m;"
 "}"
 "void main()"
 "{"
   "fragCol=vec4(1);"
   "for(int d=0;d<75;d++)"
     "{"
       "vec2 m=(gl_FragCoord.xy-vec2(1280,720))/1000+vec2(n(vec3(d+1)),n(vec3(d)))/1000;"
       "vec3 l=normalize(vec3(.5-dot(m,m)*.6,m))+vec3(0,n(vec3(d)),n(vec3(d+1)))*.01,s=vec3(-6.5,2,-5.2)-vec3(0,n(vec3(d)),n(vec3(d+1)))*.03;"
       "float c=1,g;"
       "for(int r=0;r<100;r++)"
         "{"
           "g=v(s);"
           "if(g*g<1e-6&&f>-.5)"
             "{"
               "mat3 i=mat3(s,s,s)-mat3(.01);"
               "vec3 w=normalize(v(s)-vec3(v(i[0]),v(i[1]),v(i[2])));"
               "c*=1-abs(dot(l,w))*.98;"
               "l=reflect(l,w);"
               "g=1;"
             "}"
           "s+=l*g;"
         "}"
       "fragCol+=vec4(g*g<1e-6?"
         "(sin(vec3(0,5,4)-s*.2)*.2+1.2)*c:"
         "vec3(.01),1);"
     "}"
   "fragCol=sqrt(fragCol/fragCol.w);"
 "}";

#endif // SHADERS_H_
