/* File generated with Shader Minifier 1.1.6
 * http://www.ctrl-alt-test.fr
 */
#ifndef SHADERS_H_
# define SHADERS_H_

const char *vshader_vert =
 "#version 400\n"
 "out vec2 A;"
 "void main()"
 "{"
   "gl_Position.xy=A=vec2(gl_VertexID%2*2-1,gl_VertexID/2*2-1);"
 "}";

const char *shader_frag =
 "#version 400\n"
 "in vec2 A;"
 "vec3 v=vec3(0,0,-6),f=normalize(vec3(A*vec2(1,.5625),1)),d=v,r[10],M[3];"
 "out vec3 color;"
 "float m=0;"
 "vec3 n(vec3 d,vec3 v)"
 "{"
   "float f=cos(v.x),r=sin(v.x);"
   "mat3 M=mat3(vec3(1,0,0),vec3(0,f,-r),vec3(0,r,f));"
   "f=cos(v.y);"
   "r=sin(v.y);"
   "M*=mat3(vec3(f,0,r),vec3(0,1,0),vec3(-r,0,f));"
   "f=cos(v.z);"
   "r=sin(v.z);"
   "M*=mat3(vec3(f,-r,0),vec3(r,f,0),vec3(0,0,1));"
   "return M*d;"
 "}struct MA{float d;vec3 col;bool hit;};"
 "MA n(vec3 v,float f,float d,float r,float M,vec3 m)"
 "{"
   "vec2 n=vec2(length(v.xz),v.y),s=vec2(r,f),x=vec2(r-d,2.*f),y=vec2(n.x-min(n.x,n.y<0.?d:r),abs(n.y)-f),t=n-s+x*clamp(dot(s-n,x)/dot(x,x),0.,1.);"
   ""
   "return MA(t.x<0.&&y.y<0.?-1.:1.*sqrt(min(dot(y,y),dot(t,t)))-M,m,false);"
 "}"
 "MA n(vec3 v,vec3 d,float f,vec3 r)"
 "{"
   "vec3 m=abs(v)-d;"
   ""
   "return MA(length(max(m,0.))+min(max(m.x,max(m.y,m.z)),0.)-f,r,false);"
 "}"
 "MA t(vec3 v,vec3 f,float d,vec3 r)"
 "{"
   ""
   "return MA(dot(v,f)+d,r,false);"
 "}"
 "MA t(MA d,MA v)"
 "{"
   "return d.d<v.d?d:v;"
 "}"
 "float n(float v,float f,float d)"
 "{"
   ""
   "return min(v,f)-pow(max(d-abs(v-f),0.),2)*.25/d;"
 "}"
 "MA n(vec3 v)"
 "{"
   "v=n(n(v,vec3(-.7,0.,-.04)),vec3(0,1.1,0));"
   "v.y-=1.05;"
   "v.x+=.5;"
   "MA f=t(v+vec3(0,1.25,0),vec3(0,1,0),1.,vec3(.03)),r=n(v+vec3(0,.1,0),1.,.15,.25,0,vec3(.4,0,0)),d=n(v+vec3(0,.6,0),.05,.3,.3,.05,vec3(-.015)),m=n(v+vec3(0,1.,0),.3,.6,.6,.05,vec3(-.015)),s=n(v+vec3(0,1.4,0),vec3(.9,.15,.9),.1,vec3(-.015)),M=t(n(v+vec3(1.75,1.34,.75),.05,.55,.45,.02,vec3(.4,0,0)),n(v+vec3(1.75,1.34,-.75),.05,.55,.45,.02,vec3(.4,0,0)));"
   "M.d-=.0005;"
   "MA y=t(n(v+vec3(1.75,1.27,-.75),.05,.4,.4,.015,vec3(.4,0,0)),n(v+vec3(1.75,1.27,.75),.05,.4,.4,.015,vec3(.4,0,0))),x=n(v+vec3(.5,1.85,0),vec3(1.55,0.,1.05),.45,vec3(-.015)),e=n(v+vec3(10,sin(v.x*1.8)*.1+2.05,sin(sin(v.x*.7))+.75),vec3(8,0,0),.1,vec3(-.015)),i=n(v+vec3(0.,-1.,0.),vec3(0),.5,vec3(.4,0,0));"
   ""
   "vec2 c=fract(v.xz*vec2(233.34,851.74));"
   "c+=dot(c,c+23.45);"
   ""
   "MA U=n(mod(v,.0001)-5e-05,vec3(0.),fract(c.x*c.y)*.002,vec3(-.015));"
   "f.d=mix(f.d,U.d,.05);"
   "v=n(n(v,vec3(-.5,0,0)),vec3(0,1.5,0));"
   "MA z=MA(0.,vec3(-.015),true);"
   "z.d=n(m.d,s.d,.15);"
   "z.d=n(z.d,d.d,.05);"
   "i=t(i,r);"
   "i=t(i,x);"
   "i.d=mix(i.d,U.d,.3);"
   "i=t(i,z);"
   "i=t(i,M);"
   "i=t(i,y);"
   "i=t(i,f);"
   "return t(i,e);"
 "}"
 "MA t(vec3 v,vec3 f,float r)"
 "{"
   "MA M;"
   "while(m<80&&length(v-d)<r&&!M.hit)"
     "d+=M.d*f,M=n(d),M.hit=M.d<.0001,m+=1.;"
   "return M;"
 "}"
 "vec3 t(vec3 v)"
 "{"
   "mat3 d=mat3(v,v,v)-mat3(.005);"
   "return normalize(n(v).d-vec3(n(d[0]).d,n(d[1]).d,n(d[2]).d));"
 "}"
 "float n(in vec3 v,in vec3 d,float f,float r,float M)"
 "{"
   "float i=1.,y=0;"
   "for(float m=f;m<r;)"
     "{"
       "float s=n(v+d*m).d;"
       "if(s<.001)"
         "return 0.;"
       "float x=s*s/(2.*y);"
       "i=min(i,M*sqrt(s*s-x*x)/max(0.,m-x));"
       "y=s;"
       "m+=s;"
     "}"
   "return i;"
 "}"
 "vec3 s(vec3 v,vec3 d,vec3 i,float x)"
 "{"
   "for(int m=0;m<3;m++)"
     "{"
       "float s=max(0.,dot(reflect(f,d),r[m]));"
       "i+=(s*x*.333+pow(s,64)*x*3)*M[m]*n(v,r[m],.1,20.,25);"
     "}"
   "return i;"
 "}"
 "void main()"
 "{"
   "r[0]=normalize(vec3(0,10,-2));"
   "r[1]=normalize(vec3(-50,20,-50));"
   "r[2]=normalize(vec3(-50,60,-7));"
   "vec2 m=vec2(.5,.7);"
   "M[0]=m.xxy*2;"
   "M[1]=m.xyx;"
   "M[2]=m.yxx*.75;"
   "MA i=t(v,f,20);"
   "vec3 x=t(d);"
   "if(i.hit)"
     "{"
       "color=i.col;"
       "color=s(d,x,i.col,.1);"
       "if(i.col==vec3(-.015))"
         "{"
           "d-=f*.01;"
           "f=normalize(reflect(f,x));"
           "i=t(d,f,2.5);"
           "if(i.hit)"
             "color=mix(color,s(d,t(d),i.col,.1),.1);"
         "}"
     "}"
   "color=sqrt(color*(1.-length(v-d)*.05));"
 "}";

#endif // SHADERS_H_
