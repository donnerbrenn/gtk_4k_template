// Generated with Shader Minifier 1.3.5 (https://github.com/laurentlb/Shader_Minifier/)
#ifndef SHADERS_H_
# define SHADERS_H_

const char *vshader_vert =
 "#version 400\n"
 "void main()"
 "{"
   "gl_Position=vec4(gl_VertexID%2*2-1,gl_VertexID/2*2-1,1,1);"
 "}";

const char *shader_frag =
 "#version 400\n"
 "const float m=acos(-1)*2;"
 "out vec4 fragColor;\n"
 "#define threshold.001\n"
 "vec3 f=vec3(1);\n"
 "#define SAMPLES 500\n"
 "#define BOUNCES 4\n"
 "uint v=uint(gl_FragCoord.x*gl_FragCoord.y)*uint(668265261);"
 "vec3 u;"
 "uint t(inout uint v)"
 "{"
   "v=uint(v^uint(61))^uint(v>>uint(16));"
   "v*=uint(9);"
   "v^=v>>4;"
   "v*=uint(668265261);"
   "v^=v>>15;"
   "return v;"
 "}"
 "float n(inout uint v)"
 "{"
   "return float(t(v))/4294967296.;"
 "}"
 "vec3 x(inout uint v)"
 "{"
   "float f=n(v)*2.f-1.f,i=n(v)*m,u=sqrt(1.f-f*f);"
   "return vec3(u*cos(i),u*sin(i),f);"
 "}"
 "float n(vec3 v,float f)"
 "{"
   "return length(v)-f;"
 "}"
 "float e(vec3 v)"
 "{"
   "return max(max(v.x,v.y),v.z);"
 "}"
 "float e(vec3 v,vec3 f)"
 "{"
   "vec3 i=abs(v)-f;"
   "return length(max(i,vec3(0)))+e(min(i,vec3(0)));"
 "}"
 "float i(vec3 v)"
 "{"
   "u=vec3(1);"
   "float i=-e(v,vec3(1,1,6))+.5,f=n(v,1),m=n(v+vec3(.75),.5),s=n(v+vec3(-.75,.75,.75),.5),d=min(min(min(i,f),m),s);"
   "if(d==f)"
     "u=vec3(.1,.5,.1);"
   "if(d==m)"
     "u=vec3(.2,.2,.9);"
   "if(d==s)"
     "u=vec3(.75,.2,.2);"
   "return d;"
 "}"
 "vec3 s(vec3 v)"
 "{"
   "mat3 f=mat3(v,v,v)-mat3(5e-4);"
   "return normalize(i(v)-vec3(i(f[0]),i(f[1]),i(f[2])));"
 "}"
 "bool i(inout vec3 v,vec3 f)"
 "{"
   "float m=1;"
   "for(uint u=0;u<512&&m>threshold;u++)"
     "v+=f*m,m=i(v);"
   "return m<threshold;"
 "}"
 "vec3 e(vec3 v,vec3 m,float i)"
 "{"
   "vec3 d=u*f*max(dot(normalize(v),m),0)*i;"
   "return d;"
 "}"
 "void main()"
 "{"
   "vec2 m=(gl_FragCoord.xy/vec2(2560,1440)*2-1)/vec2(1,2560./1440.);"
   "fragColor.xyz=vec3(0);"
   "vec3 d;"
   "for(int r=0;r<SAMPLES;r++)"
     "{"
       "vec3 g=normalize(vec3(m,1)),z=vec3(0,0,-3);"
       "f=vec3(1);"
       "for(int n=0;n<BOUNCES&&i(z,g);n++)"
         "d=s(z),fragColor.xyz+=e(vec3(1,1,-1),d,1),fragColor.xyz+=e(vec3(-1,0,-1),d,1),fragColor.xyz+=e(g,d,1),fragColor.xyz+=e(d,g,1),g=normalize(d+x(v)),f*=u*max(dot(g,d),0);"
     "}"
   "fragColor.xyz=sqrt(fragColor.xyz/(SAMPLES*BOUNCES));"
 "}";

#endif // SHADERS_H_
