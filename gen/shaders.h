// Generated with Shader Minifier 1.3.5 (https://github.com/laurentlb/Shader_Minifier/)
#ifndef SHADERS_H_
# define SHADERS_H_

const char *vshader_vert =
 "#version 400\n"
 "void main()"
 "{"
   "gl_Position=vec4(gl_VertexID%2*2-1,gl_VertexID/2*2-1,1,1);"
 "}";

const char *shader_frag =
 "#version 400\n\n"
 "#define TSH.001\n"
 "#define SMPL 1000\n"
 "#define BNC 8\n"
 "out vec4 Frag;"
 "uint v=uint(gl_FragCoord.x*gl_FragCoord.y)*uint(668265261);"
 "vec3 f=vec3(1),F;"
 "float i,r,m;"
 "uint n(inout uint v)"
 "{"
   "v^=61^(v>>16)*9;"
   "v^=(v>>4)*668265261;"
   "v^=v>>15;"
   "return v;"
 "}"
 "vec3 t(inout uint v)"
 "{"
   "float F=n(v)/4294967296.*2.f-1.f,i=n(v)/4294967296.*(acos(-1)*2),r=sqrt(1.f-F*F);"
   "return vec3(r*cos(i),r*sin(i),F);"
 "}"
 "float n(vec3 v,float F)"
 "{"
   "return length(v)-F;"
 "}"
 "float s(vec3 v)"
 "{"
   "F=vec3(.05);"
   "i=.01;"
   "r=2;"
   "m=0;"
   "float f=n(v,1),s=n(v+vec3(.8),.4),z=n(v+vec3(-.8,.8,.8),.4),e=n(v+vec3(-.8,-.8,.8),.4),g=n(v+vec3(.8,-.8,.8),.4),u=n(v+vec3(0,-12,-8),3),d=min(min(min(min(min(min(dot(v,vec3(0,1,0))+1.25,f),s),z),e),g),u);"
   "if(d==u)"
     "m=1.;"
   "if(d==f)"
     "F=vec3(1),i=1,r=128;"
   "if(d==e)"
     "F=vec3(.1,.9,.1),i=.5;"
   "if(d==s)"
     "F=vec3(.1,.1,.9),i=.05;"
   "if(d==z)"
     "F=vec3(.9,.1,.1),r=128,i=1;"
   "if(d==g)"
     "F=vec3(0),r=128,i=1;"
   "return d;"
 "}"
 "vec3 e(vec3 v)"
 "{"
   "mat3 d=mat3(v,v,v)-mat3(.005);"
   "return normalize(s(v)-vec3(s(d[0]),s(d[1]),s(d[2])));"
 "}"
 "bool e(inout vec3 v,vec3 F)"
 "{"
   "float i=.1,r=0;"
   "for(;r<25&&i>TSH;r+=i)"
     "v+=F*i,i=s(v);"
   "return i<TSH;"
 "}"
 "vec3 e(vec3 v,vec3 d,vec3 m,float u)"
 "{"
   "float g=max(dot(d,-normalize(v)),0);"
   "vec3 z=F*f*g;"
   "return(m*z+pow(g,r)*i)*u;"
 "}"
 "void main()"
 "{"
   "vec2 d=(gl_FragCoord.xy/vec2(2560,1440)*2-1)/vec2(1,2560./1440.);"
   "Frag.xyz=vec3(0);"
   "vec3 i,r,g;"
   "float u=1.f/tan(60*.5f*acos(-1)/180.f);"
   "for(int z=0;z<SMPL;z++)"
     "{"
       "g=normalize(vec3(d,u));"
       "r=vec3(d,-5);"
       "f=vec3(.5,.5,1);"
       "for(int n=0;n<BNC&&e(r,g);n++)"
         "i=e(r),Frag.xyz+=m,Frag.xyz+=e(r-vec3(0,6,-6),i,vec3(1),.25),Frag.xyz+=e(vec3(1,-1,-.1),i,vec3(1),.5),Frag.xyz+=e(vec3(-1,-1,-.1),i,vec3(.5,1,.125),.33),Frag.xyz+=e(t(v),i,vec3(1),.5),g=normalize(i+t(v)),f*=F*max(dot(g,i),0),Frag.w++;"
       "if(Frag.w>0)"
         "Frag.xyz+=f;"
     "}"
   "Frag.xyz=sqrt(Frag.xyz/Frag.w);"
 "}";

#endif // SHADERS_H_
