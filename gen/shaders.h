// Generated with Shader Minifier 1.3.5 (https://github.com/laurentlb/Shader_Minifier/)
#ifndef SHADERS_H_
# define SHADERS_H_

const char *vshader_vert =
 "#version 400\n"
 "void main()"
 "{"
   "gl_Position=vec4(gl_VertexID%2*2-1,gl_VertexID/2*2-1,1,1);"
 "}";

const char *shader_frag =
 "#version 400\n"
 "uint v=uint(gl_FragCoord.x*gl_FragCoord.y)*uint(668265261);"
 "out vec4 Frag;"
 "vec3 f,F;"
 "struct MA{vec3 abd;float spc;float shp;float ems;float mtl;} g;"
 "MA m=MA(vec3(.7,.01,.01),.3,64,0,0),n=MA(vec3(.1),.1,64,0,.25),z=MA(vec3(.03),.2,64,0,0),r=MA(vec3(.03,.03,.8),.2,64,0,0),w=MA(vec3(.03,.8,.03),.2,64,0,0),A=MA(vec3(.7),.2,64,0,.95),C=MA(vec3(.7),0,0,1,0);"
 "float M(inout uint v)"
 "{"
   "v^=61^(v>>16)*9^(v>>4)*668265261^v>>15;"
   "return v/4294967296.;"
 "}"
 "vec3 t(inout uint v)"
 "{"
   "float f=M(v)*2-1,F=acos(-1)*2*M(v),g=sqrt(1-f*f);"
   "return vec3(g*cos(F),g*sin(F),f);"
 "}"
 "float M(vec3 v,float f)"
 "{"
   "return length(v)-f;"
 "}"
 "float s(vec3 v)"
 "{"
   "g=MA(vec3(.03),.2,64,0,0);"
   "float s=dot(v,vec3(0,1,0))+1.25,F=M(v,1),f=M(v+vec3(.8),.4),a=M(v+vec3(-.8,.8,.8),.4),c=M(v+vec3(-.8,-.8,.8),.4),d=M(v+vec3(.8,-.8,.8),.4),e=M(v+vec3(0,-12,0),3),u=min(min(min(min(min(min(s,F),f),a),c),d),e);"
   "g=u==s?"
     "n:"
     "u==a?"
       "m:"
       "u==d?"
         "z:"
         "u==c?"
           "w:"
           "u==f?"
             "r:"
             "u==F?"
               "A:"
               "u==e?"
                 "C:"
                 "g;"
   "return u;"
 "}"
 "vec3 e(vec3 v)"
 "{"
   "mat3 m=mat3(v,v,v)-mat3(.005);"
   "return normalize(s(v)-vec3(s(m[0]),s(m[1]),s(m[2])));"
 "}"
 "vec3 M(vec3 v,vec3 m,vec3 s,float u)"
 "{"
   "float d=max(dot(m,normalize(v)),0);"
   "return(F*f*d*s+pow(d,g.shp)*g.spc)*u;"
 "}"
 "bool e(inout vec3 v,vec3 f)"
 "{"
   "float u=.1,F=0;"
   "for(;F<100&&u>.001;F+=u)"
     "v+=f*u,u=s(v);"
   "return u<.001;"
 "}"
 "void main()"
 "{"
   "vec2 m=(gl_FragCoord.xy/vec2(2560,1440)*2-1)/vec2(1,2560./1440.);"
   "Frag.xyz=vec3(0);"
   "vec3 F,u,d;"
   "for(int s=0;s<300;s++)"
     "{"
       "d=normalize(vec3(m,1.f/tan(45*.5f*acos(-1)/180.f)));"
       "u=vec3(m,-5);"
       "f=vec3(.5,.5,1);"
       "for(int z=0;z<9&&e(u,d);z++)"
         "F=e(u),f+=g.ems*g.abd,Frag.xyz+=M(vec3(0,10,-20),F,vec3(.5,.5,.9),.5),Frag.xyz+=M(vec3(-50,20,-50),F,vec3(1,.1,.1),.5),Frag.xyz+=M(vec3(50,20,-50),F,vec3(.5,1,.125),.8),Frag.xyz+=M(t(v),F,vec3(0,0,1),.5),d=normalize(mix(normalize(F+t(v)),reflect(d,F),g.mtl)),f*=g.abd*max(dot(d,F),0),Frag.w++;"
       "Frag.xyz+=Frag.w==0?"
         "vec3(0):"
         "f;"
     "}"
   "Frag.xyz=sqrt(Frag.xyz/Frag.w);"
 "}";

#endif // SHADERS_H_
